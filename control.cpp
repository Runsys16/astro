#include "control.h"
#include "main.h"

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
Control::Control(Device_cam* p)
{
    dev = p;
    pt = NULL;
}
//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void Control::init( struct v4l2_queryctrl* queryctrl)
{
    struct v4l2_control     control;
    int i;

    memset(&control, 0, sizeof(control));

    id    = queryctrl->id;
    min   = queryctrl->minimum;
    max   = queryctrl->maximum;
    def   = queryctrl->default_value;
    step  = queryctrl->step;
    if ( id == 0x009A0902 )      step = 10;
    
    for(i=0; queryctrl->name[i]!=0;i++);
    i++;
    
    name = ((char*)queryctrl->name);

    //if (queryctrl->type != V4L2_CTRL_TYPE_MENU) {
    control.id = id;

    if (0 == ioctl(dev->getFd(), VIDIOC_G_CTRL, &control)) {
        value = control.value;
        //printf( "%08X %s  %d   (%d<%d)\n", id, name, value, min, max );
        logf( (char*)"%s %08X\t%d\t(%d<%d)", name.c_str(), id, value, min, max );
    }
    //}    
}
//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
bool Control::find( string s )
{
    if ( name.find(s)!=std::string::npos)           return true;
    else                                            return false;
}
//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void Control::plus()
{
    value = value + step;
    if ( value > max )      value = max;

    dev->change_value(id, value);
    printValue();
}
//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void Control::moins()
{
    value = value - step;
    if ( value < min )      value = min;

    dev->change_value(id, value);
    printValue();
}
//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void Control::setValue(int v)
{
    if ( v >= min && v <= max)
    {
        value = v;
        logf( (char*)"Control::setValue(%d)  OK", v );
        int r = dev->change_value(id, v);
        if ( r<0 )      logf( (char*)"[erreur] change_value" );
        printValue();
    }
    else
    {
        logf( (char*)"Control::setValue(%d)  valeur hors limite (%d, %d)", v, min, max );
    }
}
//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void Control::printValue()
{
    //printf( "%s %d\n", name.c_str(), value);
    if (pt)     {
        char text[] = "00000000";
        sprintf( text, "%d", value ); 
        pt->changeText(text);
    }
    else
    {
        logf( (char*)"[Erreur} Control::printValue()" );
    }
}
//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------


